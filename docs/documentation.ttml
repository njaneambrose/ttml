!DOCTYPE html
html{
 &ttml/headers.ttml
  body{
    div class="container"{
       div class="head col-md-12"{
          h1 class="text-center"{TTML}
          h3 class="text-center"{Less talk More action}
	  span id="theme" class="fa fa-bars" style="font-size:26px;cursor: pointer"{}
	  &ttml/menu.ttml
	  hr
       }
div class="intro"{
  div class="intro-top" !#intro!{
    b{
       p{What is TTML?}
    }
    p{TTML is a shortform for (<b>Taxi To Markup Language</b>)}
    p{TTML is a lightweight language that compiles to Markup it extends normal markup language and providing a quicker and cleaner way to generate markup on the fly}
    b{
      p{Why TTML?}
    }
    ul{
      li{Easy to learn}
      li !hide!{Allows you to define your own tags like XML}
      li{Library of shortened HTML tags making your work easier (Shortcuts)}
      li{Easier ways of declaring common attributes eg:class, id,....}
      li{Allows imports from other files}
      li{Not dependent on indentation to code}
      li{Can produce almost any markup eg: HTML,XML,XHTML..}
      li{Saves time}
      li{Has extension where you can write your normal markup in your file}
      li{Produces indented code (depending on how you type your code + an option to join lines of your code)}
	  li{ERB templating support}
	  li !hide!{Saves space, 70% smaller than XML and 86% smaller than JSON holding the same data}
     }
     h3 class="text-center"{Basic Things in using TTML}
     hr
     div class="basic-info"{
       blockquote{
         #You need to at least basic experience in Markup language to use TTML
         br
         #If you have this it will take less than thirty minutes to get started
         br
         #This documentation was created using TTML by the way then converted to HTML <br>
	 #To see code add /ttml to any page url in this website eg: /documentation/ttml
         }
       p{Below we are going to introduce you to the basic syntax that you need to know:}
     }
  }
 div class="intro-mid"{
     h3 {Symbols}
    p{
       span class="code out"{# => }
      #used to indicate you want the interpreter to ignore this line
      br
	  span class="code out"{! => }
	  #Used for comments(TTML) this do not appear in your final product<br>
      span class="code out"{% => }
     # used to ignore multiple lines until the next (%) which indicates the end of that section
     br
     span class="code out"{{} => }
     #used for tags
      br
      span class="code out"{& => } 
      #used for imports
     br
      #Lastly, between the exclamation marks we declare some common attributes class or id or href or src or just all of them, your choice.
     br
	 d !alert alert-warning!{
	     #We want to make it clear now that each element should go on a separate line no matter what even if it is a closing brace for tags that exceed a single line<br>
		 #Do not put TTML code inside another TTML brace unless on different lines eg: sp{a !@http://google.com!{google} }, this link will be treated as plain text hence not interpreted<br>
		 #For the above example if it is a must do this:  sp{&lta href="http://google.com"&gtgoogle&lt/a&gt}, that will do it<br>
		 #Do not close a multi line tags behind another one eg: d {.........several lines sp{hello}}, the last brace should go on a separate line for your code to be properly executed<br>
		 #The output will only appear indented if your code was indented<br>
		 #Look at the syntax expressed in the examples below to understand what we mean
	 }
	 d !alert alert-danger!{
	  #Avoid leaving blank lines in the middle of your code especially within tags<br>
	  #Actually the product code is indented so there is no need for blank lines<br>
	  #if an error occurs something like ......undefined method  '[]'..., look for blank lines in your code(especially within tags) and remove them
	  }
    }
    blockquote{
    #Imagine that is all plus your Knowledge in Markup and other <br>
	#If you feel uncomfortable just go to the menu and click <a href="http://localhost:1776/trynow">Try it here!</a> type and compile the code to see the results yourself
	}
  p{We will have TTML code on one side and Markup code on the other side}
   h3 class="text-center" !#html!{Lets start with HTML}
   hr
    div class="col-md-12"{
     div class="col-md-6"{
	pre class="code"{
	 #<span class="com">!This is a TTML comment it will not appear in your product</span>
	 #<span class="code">#&lt!-- This is simple --&gt</span>
	 #<span class="des">body{</span>
	 #   <span class="des">div</span> <span class="nm">class</span>=<span class="in">"col-md-6"</span><span class="des">{</span>
	 #      <span class="des">p{</span>Hello World!!<span class="des">}</span>
	 #    <span class="des">}</span>
	 #   <span class="des">audio</span> <span class="nm">src</span>=<span class="in">"Good_life.mp3"</span> <span class="nm">controls</span>
	 #<span class="des">}</span>
	}
     }
     div class="col-md-6"{
     pre class="code"{
      #<span class="com">&lt!-- This is simple --&gt</span>
      #<span class="des">&ltbody&gt</span>
      #    <span class="des">&ltdiv</span> <span class="nm">class</span>=<span class="in">"col-md-6"</span><span class="des">&gt</span>
      #       <span class="des">&ltp&gt</span>Hello World!!<span class="des">&lt/p&gt</span>
      #    <span class="des">&lt/div&gt</span>
      #    <span class="des">&ltaudio</span> <span class="nm">src</span>=<span class="in">"Good_life.mp3"</span> <span class="nm">controls</span><span class="des">&gt</span>
      #<span class="des">&lt/body&gt</span>
	  #
     }
     }
 P {
  #I hope that simple example has been understood
  br
  # <span class="code out">{}</span> indicate the start and end of tags all the content you want inside should go in the braces
  br
  # text goes between the curly braces eg: <span class="code out">p{hello} to &ltp&gthello&ltp&gt</span>
  br
  #Multi line tags eg: body in the example <span class="code out">body{ and close this tag where you want body to end }</span>
  br
  #Single line tags with no text are just quick to handle eg: <span class="code out">img src="one.png" to &ltimg src="one.png"&gt</span>
  br
  #The comments that you do not want to appear in your final product are wiritten after !
 }
 blockquote{
   #Lets extend this TTML code using HTML as we said this language is not limiting<br/>
   #You can even write your whole TTML code with HTML<br/>
   #Check out below:
 }
  pre class="code col-md-12"{
    #<span class="code">#&lt!-- writing html code in TTML code --&gt</span>
   #<span class="des">P{</span>
   # <span class="code">#This is a line in a multiline stament</span>
   # <span class="des">br</span>
   # <span class="code">#This is another line<span class="des">&ltbr&gt</span></span>
   # <span class="code">#&lt--This # sign indicate that this line should not be executed--&gt</span> 
   # <span class="code">#This is <span class="des">&ltspan</span> <span class="nm">class</span>=<span class="in">"insert"</span><span class="des">&gt</span>inserting html code<span class="des">&lt/span&gt</span></span>
   # <span class="des">}</span>
   # <span class="des">%</span>
   # <span class="com">&ltp&gtthis is inserting actual html code between % sings&lt/p&gt</span>
   # <span class="com">&ltp&gtYou can write even the whole document in html as long is it is between % signs or after the # signs&lt/p&gt</span>
   # <span class="des">%</span>
  }
 pre !col-md-12 code!{
 # <span class="com">&lt!-- writing html code in TTML code --&gt</span>
 # <span class="des">&ltp&gt</span>
 # This is a line in a multi line statement
 # <span class="des">&ltbr&gt</span>
 # This is another line<span class="des">&ltbr&gt</span>
  # <span class="com">&lt!--This # sign indicate that this line should not be executed--&gt</span>
  # <span class="code">This is <span class="des">&ltspan</span> <span class="nm">class</span>=<span class="in">"insert"</span><span class="des">&gt</span>inserting html code<span class="des">&lt/span&gt</span></span>
  # <span class="des">&lt/p&gt</span>
  # <span class="code"><span class="des">&ltp&gt</span>this is inserting actual html code between % sings<span class="des">&lt/p&gt</span></span>
  # <span class="code"><span class="des">&ltp&gt</span>You can write even the whole document in html as long is it is between % signs or after the # signs<span class="des">&lt/p&gt</span></span>
 } 
 p{
  # <span class="code out">=></span> After the <span class="code out">#</span> sign or between <span class="code out">%</span> signs you can add HTML code<br/>
  # <span class="code out">=></span> When writing check what is the best option at that area to maximize productivity
 }
 blockquote{
   #You can use HTML especially between text to make work easier<br/>
   #You can HTML or any other language between <span class="code out"> % and % </span>, 
   #you are not limited to HTML but also can be used for <span class="code out">style,script,PHP,text,...</span>
 }
 %
 <h3 class="text-center" id="xhtml">Some XHTML</h3><hr/>
 <p>This syntax is not so different from <b>HTML</b> but with simple modification see below:</p>
 %
 P{
  # <span class="code out">=></span> When using XHTML use <span class="code out">img src="one.png"/</span> to produce <span class="code out">&ltimg src="one.png"/&gt</span> or<br/>
  # <span class="code out">=></span> <span class="code out">img src="one.png"{}</span> to produce <span class="code out">&ltimg src="one.png"&gt&lt/img&gt</span><br/>
  # <span class="code out">=></span> You can use any of the two methods above to ensure that all your tags are all closed
 }
   h3 class="text-center" !#examples!{Other Examples}
   hr
   div class="col-md-6"{
    h4 class="text-center"{PHP example}
    pre class="code"{
    #<span class="des">body{</span>
    # <span class="code">#&lt!--PHP example --&gt</span>
    #<span class="des">%</span>
    #<span class="code">#&lt!-- The % signs prevent the execution of this PHP code --&gt</span>
    #  <span class="com">&lt?php</span>
    # <span class="com">echo "Hello world!!"</span>
    #  <span class="com">?&gt</span>
    #<span class="des">%</span>
    #<span class="des">}</span>
    }
     h4 class="text-center"{Javascript/CSS example}
    pre class="code"{
    #<span class="des">body{</span>
    #  <span class="code">#&lt!-- Javascript and CSS example --&gt</span>
    #  <span class="des">style</span> <span class="nm">type</span>=<span class="in">"text/css"</span><span class="des">{</span>
    #  <span class="des">%</span>
    #  <span class="com">body{background: #333}</span>
    #  <span class="com">p{color: white}</span>
    #  <span class="des">%</span>
    #  <span class="des">}</span>
    #  <span class="des">script</span> <span class="nm">type</span>=<span class="in">"text/javascript"</span><span class="des">{</span>
    #  <span class="des">%</span>
    #    <span class="com">window.onload=function (){</span>
    #      <span class="com">alert("This is TTML");</span>
    #   <span class="com">}</span>
    #  <span class="des">%</span>
    #  <span class="des">}</span>
    #<span class="des">}</span>
    }
   }
   div class="col-md-6"{
    h4 class="text-center"{ERB example}
    pre class="code"{
    # <span class="code">#&lt!-- ERB example --&gt</span>
    # <span class="des">body{</span>
    #   <span class="des">table</span> <span class="nm">border</span>=<span class="in">3</span><span class="des">{</span>
    #     <span class="code"><%ENV.keys.each do |e|%></span>
    #      <span class="des">tr{</span>
    #        <span class="des">th{</span><%=e%><span class="des">}</span>
    #        <span class="des">td{</span><%=ENV[e]%><span class="des">}</span>
    #      <span class="des">}</span>
	#    <span class="code"><%end%></span> 
    #   <span class="des">}</span>
    # <span class="code"><%a="hello world"%></span>
    # <span class="des">p{</span><%=a%><span class="des">}</span>
    #<span class="des">}</span>
    }
   }
    blockquote !col-md-12,#erb!{
    #After the <span class="code out"># or between % and %</span> you can put any language or normal text<br>
	#TTML offers native support for ERB templating you can add erb code in your file like the example above<br>
	#The erb is executed during interpretation to Markup, but to do this you have <b>to initialize the Route class with true parameter as erb is not enabled by default</b><br>
	#Use the following:<br>
	 d !alert alert-success!{
	    #tax = Route.new(a,String.new,true)   for test and prototype methods<br>
		#tax = Route.new("test.ttml","test.html",true) for pipe and start methods
		#<br>
		#You can use ERB to format the output to tags eg: mathematical operations and string formats eg: sp{<%="Hello".reverse%>} or sp{<%=566*5666%>}<br>
	 }
   }
    }
    br
   h3 class="text-center"{Lets check out XML}
   hr
   blockquote id="mark"{
    #This shall be quick and easy if you have basic knowledge in XML we shall not go into the advanced parts<br>
	#TTML supports full XML syntax so no there is need to worry<br>
    #This is a Quick example that gives the basic idea but you can explore more<br>
   }
   div class="xml"{
      div class="col-md-6"{
       pre class="code"{
        #<span class="code">#&lt!--This is xml language --&gt</span>
	#<span class="des">students</span> <span class="nm">comment</span>=<span class="in">"new students"</span><span class="des">{</span>
	#    <span class="des">student{</span>
	 #      <span class="des">name{</span>Scott<span class="des">}</span>
	 #      <span class="des">age{</span>17<span class="des">}</span>
	 #      <span class="des">home{</span>England<span class="des">}</span>
	#    <span class="des">}</span>
	#    <span class="des">student{</span>
	 #      <span class="des">name{</span>Mary<span class="des">}</span>
	 #      <span class="des">age{</span>23<span class="des">}</span>
	 #      <span class="des">home{</span>USA<span class="des">}</span>
	#    <span class="des">}</span>
	#<span class="des">}</span>
       }
      }
      div class="col-md-6"{
        pre class="code"{
	   #<span class="com">&lt!--This is xml language --&gt</span>
	   #<span class="des">&ltstudents</span> <span class="nm">comment</span>=<span class="in">"new students"</span><span class="des">&gt</span>
	   #    <span class="des">&ltstudent&gt</span>
	   #       <span class="des">&ltname&gt</span>Scott<span class="des">&lt/name&gt</span>
	   #       <span class="des">&ltage&gt</span>17<span class="des">&lt/age&gt</span>
	   #       <span class="des">&lthome&gt</span>England<span class="des">&lt/home&gt</span>
	   #    <span class="des">&lt/student&gt</span>
	   #   <span class="des">&ltstudent&gt</span>
	   #       <span class="des">&ltname&gt</span>Mary<span class="des">&lt/name&gt</span>
	   #       <span class="des">&ltage&gt</span>23<span class="des">&lt/age&gt</span>
	   #       <span class="des">&lthome&gt</span>USA<span class="des">&lt/home&gt</span>
	   #    <span class="des">&lt/student&gt</span>
	   #<span class="des">&lt/students&gt</span>
	}
      }
   }
 }
  div class="importing" !#imports!{
   h3 class="text-center"{Imports handling}
   hr
   P{
   #To import a file begin a new line with <span class="code out">&X</span> where X is the name of the file you want to import<br/>
   #For TTML files you do not need to add the file extension do <span class="code out">&header</span> to import header.ttml<br>
   #The rules apply the same about  <span class="code out">#, % and %</span><br/>
   #If you want a TTML file to be executed import it outside the  <span class="code out">% and %</span><br/>
   #To import any other type of file eg a stylesheet, script file import it between <span class="code out">% and %</span><br/>
   #check the example below:
   }
   d !alert alert-info!{
     #If you are importing a file and the file imports other files, all imports are solved hence the product will contain all imported files
    }
   blockquote !hide!{
   #If the file you are importing also has imports and continuing you will get all the data from the other files and all their imports<br>
   #example: if you file imports <span class="code out">&help.ttml</span> then this file imports <span class="code out">&about.ttml</span> you will get both help.ttml and about.ttml in your file
   }
   pre class="code"{
    #<span class="des">!DOCTYPE html</span>
    #<span class="des">html{</span>
     #     <span class="code">#&lt!--Executing imports --&gt</span>
     #     <span class="in">&header</span>
     #     <span class="code">#&lt!--header.ttml is imported outside % signs hence executed to markup code --&gt</span>
     #  <span class="des">body{</span>
     #     <span class="des">section</span> <span class="nm">class</span>=<span class="in">"blogs"</span><span class="des">{</span>
     #        <span class="in">&blog</span>
     #     <span class="des">}</span>
     #     <span class="des">footer{</span>
     #      <span class="des">%</span>
      #      <span class="in">&footer.html</span>
      #      <span class="com">&lt!-- This is imported inside the % signs hence not executed just inserted the way it is --&gt</span>
     #      <span class="des">%</span>
     #     <span class="des">}</span>
     #    <span class="code">#&lt!--importing php files--&gt</span>
     #     <span class="des">%</span>
     #      <span class="com">&lt?php</span>
     #       <span class="in">&login.php</span>
     #     <span class="com">?&gt</span>
     #    <span class="des">%</span>
     #  <span class="des">}</span>
     #  <span class="des">script</span> <span class="nm">type</span>=<span class="in">"text/javascript"</span><span class="des">{</span>
     #   <span class="des">%</span>
     #     <span class="in">&path/to/script.js</span>
     #   <span class="des">%</span>
     # <span class="des">}</span>
     #<span class="des">}</span>
   }
  }
    div !col-md-12,#short!{
      h3 !text-center!{Shortcuts}
      hr
      p{All the other examples above have been written in a relatively familiar syntax but now lets dig into some TTML syntax}
      bq{
          #Shortcuts is a simple library with shortened commonly used HTML tags<br>
	  #Shortcuts are only executed as for TTML code not the Markup code you can write<br>
	  #They are meant to make your work as a developer much easier<br>
	  #Check out the example below to demonstrate that (the output is below):
      }
      pre !code col-md-12!{
       #<span class="des">doc5</span>
       #<span class="des">ht{</span>
       #   <span class="des">hd{</span>
	#     <span class="des">utf8</span>
	#     <span class="des">view1</span>
	#     <span class="com">--d</span> a simple startup site
       #     <span class="des">tt{</span>TTML<span class="des">}</span>
       #  <span class="des">}</span>
       #  <span class="des">bd{</span>
       #     <span class="des">sp{</span>Hello World<span class="des">}</span>
       #    <span class="des">bq{</span>
       #     #This is a line in a blockquote
       #    <span class="des">}</span>
       #  <span class="des">}</span>
       #<span class="des">}</span>
      }
      pre !code col-md-12!{
       #<span class="des">&lt!DOCTYPE html&gt</span>
       #  <span class="des">&lthtml&gt</span>
       #    <span class="des">&lthead&gt</span>
       #      <span class="des">&ltmeta <span class="nm">charset</span>=<span class="in">"UTF-8"</span><span class="des">/&gt</span>
       #      <span class="des">&ltmeta <span class="nm">name</span>=<span class="in">"viewport"</span><span class="nm"> content</span>=<span class="in">"width=device-width,initial-scale=1.0"</span><span class="des">/&gt</span>
         #      <span class="des">&ltmeta <span class="nm">name</span>=<span class="in">"description"</span><span class="nm"> content</span>=<span class="in">"a simple startup site"</span><span class="des">/&gt</span>
       #      <span class="des">&lttitle&gt</span><span class="code">TTML</span><span class="des">&lt/title&gt
       #  <span class="des">&lt/head&gt</span> 
       #  <span class="des">&ltbody&gt</span> 
       #     <span class="des">&ltspan&gt</span><span class="code">Hello World</span><span class="des">&lt/span&gt
       #   <span class="des">&ltblockquote&gt</span>
       #    <span class="code">This is a line in a blockquote</span>
       #   <span class="des">&lt/blockqoute&gt</span> 
       # <span class="des">&lt/body&gt</span> 
       #<span class="des">&lt/html&gt</span> 
      }
      p{
       #This was just a sample of using shortened tags for tags in HTML<br>
       #The aim was to shorten HTML tags to 2 or 3 characters for easier use<br>
       #There is a whole library of these shortened tags that you may use to make your development faster<br>
       #Check the table below that contains:        
       }
       p !tagged com! style="cursor:pointer"{<b>Shortcut table click here!</b>}
       table !table table-hover table-bordered!{
        &ttml/tag_table.ttml
       }
     bq !col-md-12!{
      #Its not a must you use this tags, you can continue using normal HTML tags until you are used to this syntax<br>
      #The tags are meant to make your work easier<br>
      #Some tags that are no listed here indicate we decided to go for the actual HTML tag e.g p,b,i<br>
      #Learning to master this tags can come in handy in future projects
     }
     h3 !#tags,hide!{Having your own tags}
     hr !hide!
     bq !hide!{
      #TTML allows you to write your own tags like how you do with XML<br>
      #This increases the efficiency in maintenance of your project as the tags are descriptive<br>
      #But to use this feature you need basic knowledge in Ruby to be able to edit the <b>Shortcuts module</b><br>
      #Check the simple example below:
     }
     pre !code hide!{
     ##&lt!-- This is not XML but HTML --&gt
     #<span class="des">single_blog{</span>
     #  <span class="des">blog_name</span><span class="nm"> class</span>=<span class="in">"text-center"</span><span class="des">{</span>Growing trees<span class="des">}</span>
      #  <span class="des">blog_release_date{</span>13-8-2018<span class="des">}</span>
     #  <span class="des">blog_likes{</span>345<span class="des">}</span>
      #  <span class="des">blog_comments{</span>45<span class="des">}</span>
     #<span class="des">}</span>
     }
     p !hide!{
     #Here is a simple explanation of how this example works<br>
     #You can instruct the interpreter the following:<br>
     #  <span class="code">single_blog => div</span><br>
     #  <span class="code">blog_name => h3</span><br>
     #  <span class="code">blog_release => p</span><br>
     #  <span class="code">blog_likes|blog_comments => span</span><br>
     #Whenever the compiler sees the tag <span class="code">&ltsingle_blog&gt</span> it knows you indicate <span class="code">&ltdiv&gt</span><br>
     # Hence it produces <span class="code">&ltdiv&gt</span> in your HTML product when interpreted and respectively for all other examples<br>
     # When editing you should supply the your tag and then the HTML tag it should represent
     }
     h3{Disabling Shortcuts}
     hr
     bq{
      #Shortcuts may be useful at times but sometimes can mess you up, maybe you are creating XML and the name of your tag was already declared as a shortcut<br>
      #But do not worry we foresaw the challenge and made using Shortcuts optional<br>
      #Shortcuts are enabled by default check <a href="/use#dshort">disabling shortcuts</a> to see how to disable them during execution
     }
     h3 !text-center,#attr!{Attributes}
     hr
       bq{
        #TTML provides you with a comfortable way of declaring attributes for tags<br>
	#You can declare them as normal HTML attributes or TTML attributes(limited)<br>
	#TTML attributes are limited to four most used tags that we observed: <span class="code out">class,id,href and src</span><br>
        #This attributes are declared inside <span class="code out">!</span> and <span class="code out">!</span> signs and attributes separated by a comma<br> 
	#Check the example below: 	
       } 
      pre !code!{
       # #&lt!-- This is a mashup of everything --&gt
       # <span class="des">d</span> <span class="com">!top_sect,wide-sect,#real,@http://www.youtube.com,>one.mp3!</span><span class="des">{}</span>
      }
      pre !code!{
      #<span class="com">&lt!--This is a mashup of everything--&gt</span>
      #<span class="des">&ltdiv</span> <span class="nm">class</span>=<span class="in">"top_sect wide-sect"</span> <span class="nm">id</span>=<span class="in">"real"</span> <span class="nm">href</span>=<span class="in">"http://www.youtube.com"</span> <span class="nm">src</span>=<span class="in">"one.mp3"</span><span class="des">&gt&lt/div&gt</span>
      }
     p{
     # Declare  <b>class</b> attribute by no additional text eg: <span class="code out">sp !red!{}</span> to <span class="code out">&ltspan class="red"&gt&lt/span&gt</span><br>
     # Declare  <b>id</b> attribute by prefixing with <span class="code out">#</span> eg: <span class="code out">sp !#red!{}</span> to <span class="code out">&ltspan id="red"&gt&lt/span&gt</span><br>
     # Declare <b>href</b> attribute by prefixing the link with <span class="code out">@</span> eg: <span class="code out">a !@http://google.com!{Google}</span> to <span class="code out">&lta href="http://google.com"&gtGoogle&lt/a&gt</span><br>
     # Declare <b>src</b> attribute by  prefixing source  with <span class="code out">&gt</span> eg: <span class="code out">img !>one.png!</span> to <span class="code out">&ltimg src="one.png"&gt</span><br>
     #<b>You can declare as many attributes of the different types as long as they are separated by a comma</b>
     }
    }
    div !join col-md-12!{
     h3 !text-center!{Jioning lines}
     hr
      bq !#join!{
         #Due to the fact that TTML produces indented code we also have a flag that allows you to join all the lines of your code at one go<br>
         #To initialize put <span class="code out">--j</span> in a new line of your code this will join all lines until the next <span class="code out">--j</span><br>
         #If you want to join your whole code then insert this flag as the first line of your code<br>
       }
    }
   }
  }
 script src="/assets/jquery.js"{}
 script type="text/javascript"{
 %
 &assets/script.js
 %
 }
}
}